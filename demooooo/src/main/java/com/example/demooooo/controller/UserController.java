package com.example.demooooo.controller;import com.example.demooooo.model.User;import com.example.demooooo.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.ui.ModelMap;import org.springframework.validation.Errors;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import java.util.List;@Controllerpublic class UserController {    @Autowired    UserService userService;    @RequestMapping(value = "/")    public String login(Model model) {        model.addAttribute("user", new User());        return "login";    }    @RequestMapping(value = "/login")    public String loginn(@ModelAttribute("user") User user, Model model) {        List<User> listU = userService.getAllUser();        for (User u : listU) {            if (user.getUsername().equals(u.getUsername())                    && user.getPassword().equals(u.getPassword())                    && u.getRoles().equals("ADMIN")) {                    model.addAttribute("user", u);                return "guest";            } else if (user.getUsername().equals(u.getUsername())                    && user.getPassword().equals(u.getPassword())                    && u.getRoles().equals("GUEST")) {                model.addAttribute("user", u);                return "guest";            }        }        return "login";    }//    @GetMapping("/admin")//    public String guest(@SessionAttribute User user){//        if (user.getRoles().equals("ADMIN")){//            return "admin";//        } else{//            return "500";//        }//    }    @GetMapping("/register")    public String register(Model model) {        model.addAttribute("user", new User());        return "register";    }    @PostMapping("/register")    public String doregister(@ModelAttribute("user") User user, Errors errors, RedirectAttributes redirectAttributes) {        boolean check = false;        List<User> listU = userService.getAllUser();        for (User u :                listU) {            if (user.getUsername().equals(u.getUsername())) {                if (user.getRoles().equals(u.getRoles())) {                    check = true;                }            }        }        if (check) {            errors.rejectValue("", "Tên người dùng đã tồn tại...");            redirectAttributes.addFlashAttribute("errorMessage", "Tên người dùng đã tồn tại...");            return "redirect:/register";        } else {            userService.saveUser(user);        }        return "redirect:/";    }}