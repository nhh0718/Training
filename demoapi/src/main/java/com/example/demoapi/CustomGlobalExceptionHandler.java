package com.example.demoapi;import org.springframework.http.*;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.context.request.WebRequest;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;import java.util.Date;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.stream.Collectors;@ControllerAdvicepublic class CustomGlobalExceptionHandler extends ResponseEntityExceptionHandler {	@ExceptionHandler(value = ResourceException.class)	public ResponseEntity<Object> exception(ResourceException exception) {		Map<String, Object> body = new LinkedHashMap<>();		body.put("timestamp", new Date());		body.put("message", exception.getMessage());		body.put("status", exception.getHttpStatus().value());		return new ResponseEntity<>(body, exception.getHttpStatus());	}	@Override	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,																  HttpHeaders headers,																  HttpStatus status, WebRequest request) {		Map<String, Object> body = new LinkedHashMap<>();		body.put("timestamp", new Date());		body.put("status", status.value());		//Get all errors		List<String> errors = ex.getBindingResult()				.getFieldErrors()				.stream()				.map(x -> x.getDefaultMessage())				.collect(Collectors.toList());		body.put("errors", errors);		return new ResponseEntity<>(body, headers, status);	}}